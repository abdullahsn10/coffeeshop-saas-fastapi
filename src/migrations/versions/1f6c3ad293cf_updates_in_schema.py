from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "1f6c3ad293cf"
down_revision: Union[str, None] = "f569bb93af7c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f("ix_branch_id"), "branch", ["id"], unique=False)
    op.drop_constraint("branch_coffee_shop_id_fkey", "branch", type_="foreignkey")
    op.create_foreign_key(None, "branch", "coffee_shop", ["coffee_shop_id"], ["id"])
    op.create_index(op.f("ix_coffee_shop_id"), "coffee_shop", ["id"], unique=False)
    op.alter_column(
        "customer",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.create_index(op.f("ix_customer_id"), "customer", ["id"], unique=False)
    op.drop_constraint("fk_customer_coffee_shop", "customer", type_="foreignkey")
    op.create_foreign_key(None, "customer", "coffee_shop", ["coffee_shop_id"], ["id"])
    op.drop_constraint(
        "fk_inventory_item_coffee_shop", "inventory_item", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "inventory_item", "coffee_shop", ["coffee_shop_id"], ["id"]
    )
    op.drop_constraint("fk_menu_item_coffee_shop", "menu_item", type_="foreignkey")
    op.create_foreign_key(None, "menu_item", "coffee_shop", ["coffee_shop_id"], ["id"])

    # Create the new ENUM type 'orderstatus'
    new_enum = postgresql.ENUM(
        "PENDING", "IN_PROGRESS", "COMPLETED", "CLOSED", name="orderstatus"
    )
    new_enum.create(op.get_bind())  # Creating the ENUM type

    # Alter the 'status' column to use the new ENUM, with explicit casting
    op.execute(
        'ALTER TABLE "order" ALTER COLUMN status TYPE orderstatus USING status::text::orderstatus'
    )

    op.alter_column("order", "customer_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column("order", "issuer_id", existing_type=sa.INTEGER(), nullable=False)
    op.drop_constraint("fk_order_assigner", "order", type_="foreignkey")
    op.drop_constraint("order_employee_id_fkey", "order", type_="foreignkey")
    op.drop_constraint("order_customer_id_fkey", "order", type_="foreignkey")
    op.create_foreign_key(None, "order", "user", ["assigner_id"], ["id"])
    op.create_foreign_key(None, "order", "user", ["issuer_id"], ["id"])
    op.create_foreign_key(None, "order", "customer", ["customer_id"], ["id"])
    op.drop_constraint("order_item_item_id_fkey", "order_item", type_="foreignkey")
    op.drop_constraint("order_item_order_id_fkey", "order_item", type_="foreignkey")
    op.create_foreign_key(None, "order_item", "menu_item", ["item_id"], ["id"])
    op.create_foreign_key(None, "order_item", "order", ["order_id"], ["id"])

    # Create the new ENUM type 'userrole'
    new_userrole_enum = postgresql.ENUM(
        "ADMIN", "CASHIER", "CHEF", "ORDER_RECEIVER", name="userrole"
    )
    new_userrole_enum.create(op.get_bind())  # Creating the ENUM type

    # Alter the 'role' column in the 'user' table to use the new ENUM
    op.execute(
        'ALTER TABLE "user" ALTER COLUMN role TYPE userrole USING role::text::userrole'
    )

    op.create_index(op.f("ix_user_id"), "user", ["id"], unique=False)
    op.drop_constraint("user_branch_id_fkey", "user", type_="foreignkey")
    op.create_foreign_key(None, "user", "branch", ["branch_id"], ["id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "user", type_="foreignkey")
    op.create_foreign_key(
        "user_branch_id_fkey",
        "user",
        "branch",
        ["branch_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_index(op.f("ix_user_id"), table_name="user")

    # Alter 'user.role' back to the old ENUM
    op.execute(
        'ALTER TABLE "user" ALTER COLUMN role TYPE user_role USING role::text::user_role'
    )

    # Drop the new ENUM type 'userrole'
    new_userrole_enum = postgresql.ENUM(
        "ADMIN", "CASHIER", "CHEF", "ORDER_RECEIVER", name="userrole"
    )
    new_userrole_enum.drop(op.get_bind())

    op.drop_constraint(None, "order_item", type_="foreignkey")
    op.drop_constraint(None, "order_item", type_="foreignkey")
    op.create_foreign_key(
        "order_item_order_id_fkey",
        "order_item",
        "order",
        ["order_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.create_foreign_key(
        "order_item_item_id_fkey",
        "order_item",
        "menu_item",
        ["item_id"],
        ["id"],
        ondelete="RESTRICT",
    )

    # Alter 'order.status' back to the old ENUM
    op.execute(
        'ALTER TABLE "order" ALTER COLUMN status TYPE order_status USING status::text::order_status'
    )

    # Drop the new ENUM type 'orderstatus'
    new_enum = postgresql.ENUM(
        "PENDING", "IN_PROGRESS", "COMPLETED", "CLOSED", name="orderstatus"
    )
    new_enum.drop(op.get_bind())

    op.alter_column("order", "customer_id", existing_type=sa.INTEGER(), nullable=True)
    op.alter_column("order", "issuer_id", existing_type=sa.INTEGER(), nullable=True)

    op.drop_constraint(None, "menu_item", type_="foreignkey")
    op.create_foreign_key(
        "fk_menu_item_coffee_shop",
        "menu_item",
        "coffee_shop",
        ["coffee_shop_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(None, "inventory_item", type_="foreignkey")
    op.create_foreign_key(
        "fk_inventory_item_coffee_shop",
        "inventory_item",
        "coffee_shop",
        ["coffee_shop_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_constraint(None, "customer", type_="foreignkey")
    op.create_foreign_key(
        "fk_customer_coffee_shop",
        "customer",
        "coffee_shop",
        ["coffee_shop_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_index(op.f("ix_customer_id"), table_name="customer")
    op.alter_column(
        "customer",
        "created",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("ix_coffee_shop_id"), table_name="coffee_shop")
    op.drop_constraint(None, "branch", type_="foreignkey")
    op.create_foreign_key(
        "branch_coffee_shop_id_fkey",
        "branch",
        "coffee_shop",
        ["coffee_shop_id"],
        ["id"],
        ondelete="RESTRICT",
    )
    op.drop_index(op.f("ix_branch_id"), table_name="branch")
    # ### end Alembic commands ###
